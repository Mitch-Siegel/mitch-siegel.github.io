I"‡<h2 id="implementing-pointers">Implementing Pointers</h2>
<p>Since last update, progress has been a bit slow, but I‚Äôve managed to get very basic pointers up and running. Given that there is still only one type supported in the compiler, the basic implementation is fortunately able to mostly ignore (or just make assumptions about) data size. The main steps in implementing pointers were as follows:</p>

<h3 id="pointer-parse-rules">Pointer Parse Rules</h3>
<p>The abilities of pointers necessitate the addition of two main complexities in parsing. The first is the ability to declare variables at different levels of indirection (var vs var * vs var **, etc). This is simply handled by nesting a declared name under a one-legged tree of ‚Äúdereference‚Äù tokens correspondingly deep. The second is the ability to arbitrarily use the dereference operator <code class="language-plaintext highlighter-rouge">*</code> in expressions, to both read from and write to addresses denoted by sub-expressions.</p>

<h3 id="pointers-and-the-symbol-table">Pointers and the Symbol Table</h3>
<p>Because pointer declarations are nested as children of dereference operators, it‚Äôs easy to recurse during the first AST traversal to count how many levels of indirection a declaration specifies. Tracking this in the symbol table entry for each variable is then as simple as an integer count of indirection level. This should hold even when implementing different types down the road.</p>

<h3 id="intermediate-code-for-pointers">Intermediate Code for Pointers</h3>
<p>When on the left-hand side of an expression, a single dereference operator signifies a write to the memory address dictated by the pointer subexpression following it (including more dereference tokens, treated the same as dereference operations on the RHS). Similarly, on the right-hand side of an expression, a dereference operator signifies a read from the memory address pointed to by the memory address dictated by its pointer subexpression.</p>

<h3 id="assembly-generation-and-register-allocation">Assembly Generation and Register Allocation</h3>
<p>Since pointer arithmetic ultimately just boils down to regular arithmetic, the only thing to deal with (for now) is just generating instructions to read and write memory when necessary. Optimizing pointer arithmetic is something that can happen down the road, for now it just needs to work. Firing everything up to do basic adaptations of the fibonacci and prime number finders, this works perfectly!</p>

<h2 id="benchmark-improvements">Benchmark Improvements</h2>
<p>Including the source and assembly for the benchmarks in the last blog post cluttered things up too much. For the actual source code and generated assembly, look <a href="https://github.com/Mitch-Siegel/customSystem/tree/main/compiler/benchmarks">here</a>. 
| Benchmark | Instructions Executed (2/23 benchmark)|
|‚Äî‚Äî-|‚Äî‚Äî-|
| First 20 Fibonacci numbers: | 859,483 |
| Just the 20th Fibonacci number: | 328,363 |
| All primes under 1000: | 6,923,578 |</p>
:ET